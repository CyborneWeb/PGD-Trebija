@import "tailwindcss";
@import "flowbite/src/themes/default";
@plugin "flowbite/plugin";
@source "../node_modules/flowbite";
@config "../tailwind.config.js";

/* Apply faster transitions to all elements for smoother theme switching */
* {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

svg, svg path {
  transition-property: color, fill, stroke;
  transition-duration: 150ms;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Add to index.css */
.dark .theme-icon svg, .dark .theme-icon svg path,
.dark svg.theme-icon, .dark svg.theme-icon path {
  color: white !important;
  fill: currentColor !important;
}

.theme-icon svg, .theme-icon svg path,
svg.theme-icon, svg.theme-icon path {
  color: black !important;
  fill: currentColor !important;
}

.bg-red-700 .theme-icon svg,
.bg-red-700 .theme-icon svg path,
.bg-red-700 svg.theme-icon,
.bg-red-700 svg.theme-icon path,
.bg-red-700 .custom-color-icon svg,
.bg-red-700 svg.custom-color-icon {
  color: white !important;
  fill: white !important;
}

/* Custom colored icons will remain their set color */
.custom-color-icon svg, svg.custom-color-icon {
  /* No color overrides here, just keep their own styling */
}

body{
  @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100;
  background-image: 
    linear-gradient(to right, rgba(0, 0, 0, 0.02) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(0, 0, 0, 0.02) 1px, transparent 1px);
  background-size: 50px 50px;
  background-color: #fafafa;
}

/* Dark mode pattern override */
.dark body {
  background-image: 
    linear-gradient(to right, rgba(255, 255, 255, 0.01) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.01) 1px, transparent 1px);
  background-size: 50px 50px;
  background-color: #111827;
}

html {
  @apply scroll-smooth;
}

.weather-text {
  transition-duration: 0ms !important;
  color: var(--weather-text-color) !important;
}

:root {
  --weather-text-color: #4B5563; /* text-gray-600 */
}

.dark {
  --weather-text-color: #D1D5DB; /* text-gray-300 */
}

/* Grid patterns for PageHeader component */
.bg-grid-pattern-light {
  background-image: 
    linear-gradient(to right, rgba(0, 0, 0, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
  background-size: 20px 20px;
}

.bg-grid-pattern-dark {
  background-image: 
    linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
  background-size: 20px 20px;
}

/* Additional patterns for enhanced backgrounds */
.bg-stripes-light {
  background-image: repeating-linear-gradient(
    45deg,
    transparent,
    transparent 10px,
    rgba(0, 0, 0, 0.05) 10px,
    rgba(0, 0, 0, 0.05) 20px
  );
}

.bg-stripes-dark {
  background-image: repeating-linear-gradient(
    45deg,
    transparent,
    transparent 10px,
    rgba(255, 255, 255, 0.05) 10px,
    rgba(255, 255, 255, 0.05) 20px
  );
}

.bg-dots-pattern {
  background-image: radial-gradient(circle at 25% 25%, rgba(0, 0, 0, 0.1) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, rgba(0, 0, 0, 0.1) 2px, transparent 2px);
  background-size: 30px 30px;
  background-position: 0 0, 15px 15px;
}

.dark .bg-dots-pattern {
  background-image: radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.1) 2px, transparent 2px),
                    radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.1) 2px, transparent 2px);
}

/* Smooth scrolling for sub-navigation */
.container {
  scroll-behavior: smooth;
}

/* Custom scrollbar for horizontal overflow */
.overflow-x-auto::-webkit-scrollbar {
  height: 4px;
}

.overflow-x-auto::-webkit-scrollbar-track {
  background: transparent;
}

.overflow-x-auto::-webkit-scrollbar-thumb {
  background: rgba(239, 68, 68, 0.5);
  border-radius: 2px;
}

.overflow-x-auto::-webkit-scrollbar-thumb:hover {
  background: rgba(239, 68, 68, 0.7);
}

/* Ensure SVG elements transition immediately with their parent elements */

.menu-item svg,
.menu-item svg path {
  color: inherit !important;
  fill: currentColor !important;
  transition: all 0ms !important; /* Remove transition delay for icons */
}

/* Force immediate color inheritance for better sync */

.menu-item:hover svg,
.menu-item:hover svg path {
  color: inherit !important;
  fill: currentColor !important;
}

/* Custom class for SVG icons to ensure they inherit colors properly */
.icon-inherit {
  display: inline-block !important;
  line-height: 1 !important;
}

.icon-inherit svg {
  fill: currentColor !important;
  stroke: currentColor !important;
  stroke-width: 0 !important;
  width: 1em !important;
  height: 1em !important;
  transition: all 0.2s ease-in-out !important; /* Smooth transition for color changes */
}

/* Remove these conflicting rules that disable all animations */
/* Add proper React icon styling that preserves animations */
.react-icon {
  display: inline-flex;
}

.react-icon svg {
  fill: currentColor;
  stroke: none;
}

/* If some icons need stroke instead of fill */
.react-icon-stroke svg {
  fill: none;
  stroke: currentColor;
}

/* Allow animations but prevent theme transition delay */
.react-icon svg {
  transition-property: transform, opacity, scale !important;
  transition-duration: 0.3s !important;
}

/* Only theme-related properties should have no transition */
.react-icon svg * {
  transition-property: fill, stroke, color !important;
  transition-duration: 0ms !important;
}

/* Special case for stroke-based icons */
.react-icon-stroke svg {
  fill: none !important;
  stroke: currentColor !important;
  stroke-width: 2 !important;
  /* Allow animations but prevent theme transition delay */
  transition-property: transform, opacity, scale !important;
  transition-duration: 0.3s !important;
}

/* Force immediate color changes on hover and active states */
button:hover .react-icon svg,
.active .react-icon svg,
[class*="active"] .react-icon svg {
  transition: none !important;
  fill: currentColor !important;
  color: inherit !important;
}
[class*="active"] .react-icon svg {
  transition: none !important;
  fill: currentColor !important;
  color: inherit !important;
}


